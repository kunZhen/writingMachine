Tokens encontrados:
[('Proc', 'PROC', 2, 1), ('Main', 'ID', 2, 6), ('(', 'LPAREN', 2, 10), (')', 'RPAREN', 2, 11), ('[', 'LBRACKET', 3, 1), ('ContinueRight', 'CONTINUERIGHT', 4, 1), (10, 'NUMBER', 4, 15), (';', 'SEMI', 4, 17), ('Down', 'DOWN', 5, 1), (';', 'SEMI', 5, 5), ('ContinueRight', 'CONTINUERIGHT', 6, 1), (2, 'NUMBER', 6, 15), (';', 'SEMI', 6, 16), ('Up', 'UP', 7, 1), (';', 'SEMI', 7, 3), ('ContinueLeft', 'CONTINUELEFT', 8, 1), (5, 'NUMBER', 8, 14), (';', 'SEMI', 8, 15), ('Down', 'DOWN', 9, 1), (';', 'SEMI', 9, 5), ('ContinueLeft', 'CONTINUELEFT', 10, 1), (4, 'NUMBER', 10, 14), (';', 'SEMI', 10, 15), (']', 'RBRACKET', 11, 1), (';', 'SEMI', 11, 2), ('end', 'END', 12, 1), (';', 'SEMI', 12, 4)]

AST: <ast_custom.program.Program object at 0x000001FBB6ECDBB0>
Registrando procedimiento: Main
Procedimiento Main registrado con 0 parámetros: []
Ejecutando el procedimiento 'Main'...

Ejecutando llamada al procedimiento: Main con 0 argumentos
Ejecutando cuerpo del procedimiento Main
Movido 10 unidades hacia la derecha. Nueva posición en X: 10
Lapicero colocado en la superficie (Down)
Movido 2 unidades hacia la derecha. Nueva posición en X: 12
Lapicero levantado de la superficie (Up)
Movido 5 unidades hacia la izquierda. Nueva posición en X: %"updated_x" = load i32, i32* @"x_position"
Lapicero colocado en la superficie (Down)
Movido 4 unidades hacia la izquierda. Nueva posición en X: %"updated_x.1" = load i32, i32* @"x_position"
Finalizada la ejecución del procedimiento Main


AST:
Program
  statements: [
  ProcedureStatement
    procedure_name: Main
    arguments: [
    ]
    body: [
    Program
      statements: [
      ContinueRightStatement
        move_units:
        Expression
          value:
          NumberExpression
            value: 10
      DownStatement
      ContinueRightStatement
        move_units:
        Expression
          value:
          NumberExpression
            value: 2
      UpStatement
      ContinueLeftStatement
        move_units:
        Expression
          value:
          NumberExpression
            value: 5
      DownStatement
      ContinueLeftStatement
        move_units:
        Expression
          value:
          NumberExpression
            value: 4
      ]
    ]
  ]
Symbol Table:
Name       Type       Procedure       Value
--------------------------------------------------
El IR es válido antes de optimización.
Optimización completada. IR optimizado:
; ModuleID = '<string>'
source_filename = "<string>"
target triple = "unknown-unknown-unknown"

@x_position = common global i32 0
@y_position = common global i32 0
@pen_down = common global i1 false

define void @Main() {
entry:
  %current_x = load i32, i32* @x_position, align 4
  %new_x = add i32 %current_x, 10
  store i32 %new_x, i32* @x_position, align 4
  fence seq_cst
  store i1 true, i1* @pen_down, align 1
  fence seq_cst
  %current_x.1 = load i32, i32* @x_position, align 4
  %new_x.1 = add i32 %current_x.1, 2
  store i32 %new_x.1, i32* @x_position, align 4
  fence seq_cst
  store i1 false, i1* @pen_down, align 1
  fence seq_cst
  %current_x.2 = load i32, i32* @x_position, align 4
  %new_x.2 = add i32 %current_x.2, -5
  store i32 %new_x.2, i32* @x_position, align 4
  fence seq_cst
  store i1 true, i1* @pen_down, align 1
  fence seq_cst
  %current_x.3 = load i32, i32* @x_position, align 4
  %new_x.3 = add i32 %current_x.3, -4
  store i32 %new_x.3, i32* @x_position, align 4
  ret void
}

El IR es válido después de optimización.
; ModuleID = '<string>'
source_filename = "<string>"
target triple = "unknown-unknown-unknown"

@x_position = common global i32 0
@y_position = common global i32 0
@pen_down = common global i1 false

define void @Main() {
entry:
  %current_x = load i32, i32* @x_position, align 4
  %new_x = add i32 %current_x, 10
  store i32 %new_x, i32* @x_position, align 4
  fence seq_cst
  store i1 true, i1* @pen_down, align 1
  fence seq_cst
  %current_x.1 = load i32, i32* @x_position, align 4
  %new_x.1 = add i32 %current_x.1, 2
  store i32 %new_x.1, i32* @x_position, align 4
  fence seq_cst
  store i1 false, i1* @pen_down, align 1
  fence seq_cst
  %current_x.2 = load i32, i32* @x_position, align 4
  %new_x.2 = add i32 %current_x.2, -5
  store i32 %new_x.2, i32* @x_position, align 4
  fence seq_cst
  store i1 true, i1* @pen_down, align 1
  fence seq_cst
  %current_x.3 = load i32, i32* @x_position, align 4
  %new_x.3 = add i32 %current_x.3, -4
  store i32 %new_x.3, i32* @x_position, align 4
  ret void
}

Código ensamblador generado exitosamente.
Archivo ensamblador guardado como output.s
Archivo ensamblador limpio guardado como output.s
Archivo ensamblador limpio guardado como output.s
Archivo objeto generado como output.o
Archivo objeto generado exitosamente: output.o
