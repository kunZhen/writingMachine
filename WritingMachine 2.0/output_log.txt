Tokens encontrados:
[('Proc', 'PROC', 3, 1), ('Main', 'ID', 3, 6), ('(', 'LPAREN', 3, 10), (')', 'RPAREN', 3, 11), ('[', 'LBRACKET', 4, 1), ('Def', 'DEF', 5, 1), ('(', 'LPAREN', 5, 4), ('varGlobal1', 'ID', 5, 5), (',', 'COMMA', 5, 15), (1, 'NUMBER', 5, 16), (')', 'RPAREN', 5, 17), (';', 'SEMI', 5, 18), ('Def', 'DEF', 6, 1), ('(', 'LPAREN', 6, 5), ('var1', 'ID', 6, 6), (',', 'COMMA', 6, 10), (4, 'NUMBER', 6, 11), (')', 'RPAREN', 6, 12), (';', 'SEMI', 6, 13), ('Put', 'PUT', 7, 1), ('(', 'LPAREN', 7, 4), ('varGlobal1', 'ID', 7, 5), (',', 'COMMA', 7, 15), ('var1', 'ID', 7, 17), (')', 'RPAREN', 7, 21), (';', 'SEMI', 7, 22), ('PosY', 'POSY', 8, 1), ('varGlobal1', 'ID', 8, 6), (';', 'SEMI', 8, 16), ('Down', 'DOWN', 9, 1), (';', 'SEMI', 9, 5), (']', 'RBRACKET', 10, 1), (';', 'SEMI', 10, 2), ('end', 'END', 11, 1), (';', 'SEMI', 11, 4)]

AST: <ast_custom.program.Program object at 0x0000020C2893F100>
Registrando procedimiento: Main
Procedimiento Main registrado con 0 parámetros: []
Ejecutando el procedimiento 'Main'...

Ejecutando llamada al procedimiento: Main con 0 argumentos
Ejecutando cuerpo del procedimiento Main
Definido varGlobal1 = 1 (Tipo: NUMBER)
Definido var1 = 4 (Tipo: NUMBER)
Actualizado varGlobal1_Main = 4
Posicion actualizada a X: 0, Y: 4
Lapicero colocado en la superficie (Down)
Finalizada la ejecución del procedimiento Main


AST:
Program
  statements: [
  ProcedureStatement
    procedure_name: Main
    arguments: [
    ]
    body: [
    Program
      statements: [
      DefStatement
        var_name: varGlobal1
        value:
        Expression
          value:
          NumberExpression
            value: 1
      DefStatement
        var_name: var1
        value:
        Expression
          value:
          NumberExpression
            value: 4
      PutStatement
        var_name: varGlobal1
        value:
        Expression
          value:
          IdExpression
            var_name: var1
      PosYStatement
        y_val:
        Expression
          value:
          IdExpression
            var_name: varGlobal1
      DownStatement
      ]
    ]
  ]
Symbol Table:
Name       Type       Procedure       Value
--------------------------------------------------
varGlobal1 NUMBER     Main            4
var1       NUMBER     Main            4
El IR es válido antes de optimización.
Optimización completada. IR optimizado:
; ModuleID = '<string>'
source_filename = "<string>"
target triple = "unknown-unknown-unknown"

@x_position = common global i32 0
@y_position = common global i32 0
@pen_down = common global i1 false

define void @Main() {
entry:
  store i32 4, i32* @y_position, align 4
  fence seq_cst
  store i1 true, i1* @pen_down, align 1
  fence seq_cst
  ret void
}

El IR es válido después de optimización.
; ModuleID = '<string>'
source_filename = "<string>"
target triple = "unknown-unknown-unknown"

@x_position = common global i32 0
@y_position = common global i32 0
@pen_down = common global i1 false

define void @Main() {
entry:
  store i32 4, i32* @y_position, align 4
  fence seq_cst
  store i1 true, i1* @pen_down, align 1
  fence seq_cst
  ret void
}

Código ensamblador generado exitosamente.
Archivo ensamblador guardado como output.s
Archivo ensamblador limpio guardado como output.s
Archivo ensamblador limpio guardado como output.s
Archivo objeto generado como output.o
Archivo objeto generado exitosamente: output.o
