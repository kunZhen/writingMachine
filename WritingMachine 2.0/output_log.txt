Tokens encontrados:
[('Proc', 'PROC', 2, 1), ('Main', 'ID', 2, 6), ('(', 'LPAREN', 2, 10), (')', 'RPAREN', 2, 11), ('[', 'LBRACKET', 3, 1), ('Def', 'DEF', 4, 1), ('(', 'LPAREN', 4, 4), ('var', 'ID', 4, 5), (',', 'COMMA', 4, 8), (5, 'NUMBER', 4, 9), (')', 'RPAREN', 4, 10), (']', 'RBRACKET', 6, 1), (';', 'SEMI', 6, 2), ('end', 'END', 7, 1), (';', 'SEMI', 7, 4)]

AST: <ast_custom.program.Program object at 0x0000021F7F3FCBB0>
Registrando procedimiento: Main
Procedimiento Main registrado con 0 parámetros: []
Ejecutando el procedimiento 'Main'...

Ejecutando llamada al procedimiento: Main con 0 argumentos
Ejecutando cuerpo del procedimiento Main
Definido var = 5 (Tipo: NUMBER)
Finalizada la ejecución del procedimiento Main


AST:
Program
  statements: [
  ProcedureStatement
    procedure_name: Main
    arguments: [
    ]
    body: [
    Program
      statements: [
      DefStatement
        var_name: var
        value:
        Expression
          value:
          NumberExpression
            value: 5
      ]
    ]
  ]
Symbol Table:
Name       Type       Procedure       Value
--------------------------------------------------
var        NUMBER     Main            5
El IR es válido.
; ModuleID = "modulo_principal"
target triple = "unknown-unknown-unknown"
target datalayout = ""

define void @"Main"()
{
entry:
  %"var" = alloca i32
  store i32 5, i32* %"var"
  ret void
}

