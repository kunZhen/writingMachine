Tokens encontrados:
[('Proc', 'PROC', 2, 1), ('Main', 'ID', 2, 6), ('(', 'LPAREN', 2, 10), (')', 'RPAREN', 2, 11), ('[', 'LBRACKET', 3, 1), ('Equal', 'EQUAL', 4, 1), ('(', 'LPAREN', 4, 6), ('True', 'BOOLEAN', 4, 7), (',', 'COMMA', 4, 11), ('false', 'BOOLEAN', 4, 12), (')', 'RPAREN', 4, 17), (';', 'SEMI', 4, 18), ('Def', 'DEF', 5, 1), ('(', 'LPAREN', 5, 4), ('var', 'ID', 5, 5), (',', 'COMMA', 5, 8), (5, 'NUMBER', 5, 9), (')', 'RPAREN', 5, 10), (';', 'SEMI', 5, 11), ('Def', 'DEF', 6, 1), ('(', 'LPAREN', 6, 4), ('var2', 'ID', 6, 5), (',', 'COMMA', 6, 9), ('true', 'BOOLEAN', 6, 10), (')', 'RPAREN', 6, 14), (';', 'SEMI', 6, 15), ('For', 'FOR', 8, 1), ('var6', 'ID', 8, 5), ('(', 'LPAREN', 8, 9), (1, 'NUMBER', 8, 10), ('to', 'TO', 8, 12), (5, 'NUMBER', 8, 15), (')', 'RPAREN', 8, 16), ('Loop', 'LOOP', 8, 18), ('[', 'LBRACKET', 9, 1), ('PoxY', 'ID', 9, 2), ('Add', 'ADD', 9, 7), ('(', 'LPAREN', 9, 10), ('var', 'ID', 9, 11), (',', 'COMMA', 9, 14), ('var', 'ID', 9, 16), (')', 'RPAREN', 9, 19), (';', 'SEMI', 9, 20), ('ContinueRight', 'CONTINUERIGHT', 10, 1), (9, 'NUMBER', 10, 15), (';', 'SEMI', 10, 16), (']', 'RBRACKET', 10, 17), ('End', 'END', 11, 1), ('Loop', 'LOOP', 11, 5), (';', 'SEMI', 11, 9), ('Def', 'DEF', 13, 1), ('(', 'LPAREN', 13, 4), ('bucle', 'ID', 13, 5), (',', 'COMMA', 13, 10), (2, 'NUMBER', 13, 12), (')', 'RPAREN', 13, 13), (';', 'SEMI', 13, 14), (']', 'RBRACKET', 16, 1), (';', 'SEMI', 16, 2), ('end', 'END', 17, 1), (';', 'SEMI', 17, 4)]

AST: <ast_custom.program.Program object at 0x000002443C85ED90>
Registrando procedimiento: Main
Procedimiento Main registrado con 0 parámetros: []
Ejecutando el procedimiento 'Main'...

Ejecutando llamada al procedimiento: Main con 0 argumentos
Ejecutando cuerpo del procedimiento Main
False
Definido var = 5 (Tipo: NUMBER)
Definido var2 = True (Tipo: BOOLEAN)
Actualizado var_Main = 10
Movido 9 unidades hacia la derecha. Nueva posicion en X: 9
Definido bucle = 2 (Tipo: NUMBER)
Finalizada la ejecución del procedimiento Main


AST:
Program
  statements: [
  ProcedureStatement
    procedure_name: Main
    arguments: [
    ]
    body: [
    Program
      statements: [
      Expression
        value:
        EqualStatement
          left:
          Expression
            value:
            BooleanExpression
              value: True
          right:
          Expression
            value:
            BooleanExpression
              value: False
      DefStatement
        var_name: var
        value:
        Expression
          value:
          NumberExpression
            value: 5
      DefStatement
        var_name: var2
        value:
        Expression
          value:
          BooleanExpression
            value: True
      Expression
        value:
        ForStatement
          variable: var6
          min_value:
          NumberExpression
            value: 1
          max_value:
          NumberExpression
            value: 5
          body: [
          Program
            statements: [
            Expression
              value:
              IdExpression
                var_name: PoxY
            AddStatement
              var_name: var
              increment_value:
              Expression
                value:
                IdExpression
                  var_name: var
            ContinueRightStatement
              move_units:
              Expression
                value:
                NumberExpression
                  value: 9
            ]
          ]
      DefStatement
        var_name: bucle
        value:
        Expression
          value:
          NumberExpression
            value: 2
      ]
    ]
  ]
Symbol Table:
Name       Type       Procedure       Value
--------------------------------------------------
var        NUMBER     Main            10
var2       BOOLEAN    Main            True
bucle      NUMBER     Main            2
El IR es válido.
; ModuleID = "modulo_principal"
target triple = "unknown-unknown-unknown"
target datalayout = ""

@"x_position" = common global i32 0
@"y_position" = common global i32 0
@"pen_down" = common global i1 0
define void @"Main"()
{
entry:
  %".2" = icmp eq i1 1, 0
  %"var" = alloca i32
  store i32 5, i32* %"var"
  %"var2" = alloca i1
  store i1 1, i1* %"var2"
  %"var6" = alloca i32
  store i32 1, i32* %"var6"
  br label %"loop_head"
loop_head:
  %".7" = load i32, i32* %"var6"
  %".8" = icmp slt i32 %".7", 5
  br i1 %".8", label %"loop_body", label %"loop_end"
loop_body:
  store i32 10, i32* %"var"
  %".11" = load i32, i32* @"x_position"
  %".12" = add i32 %".11", 9
  store i32 %".12", i32* @"x_position"
  %".14" = add i32 %".7", 1
  store i32 %".14", i32* %"var6"
  br label %"loop_head"
loop_end:
  %"bucle" = alloca i32
  store i32 2, i32* %"bucle"
  ret void
}

