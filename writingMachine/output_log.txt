Tokens encontrados:
[('Def', 'DEF', 5, 1), ('(', 'LPAREN', 5, 4), ('var4', 'ID', 5, 5), (',', 'COMMA', 5, 9), ('True', 'BOOLEAN', 5, 10), (')', 'RPAREN', 5, 14), (';', 'SEMI', 5, 15), ('Put', 'PUT', 6, 1), ('(', 'LPAREN', 6, 4), ('var4', 'ID', 6, 5), (',', 'COMMA', 6, 9), (5, 'NUMBER', 6, 11), ('>', 'GT', 6, 12), (6, 'NUMBER', 6, 13), (')', 'RPAREN', 6, 14), (';', 'SEMI', 6, 15), ('Def', 'DEF', 7, 1), ('(', 'LPAREN', 7, 4), ('var', 'ID', 7, 5), (',', 'COMMA', 7, 8), (1, 'NUMBER', 7, 9), (')', 'RPAREN', 7, 10), (';', 'SEMI', 7, 11), ('Def', 'DEF', 8, 1), ('(', 'LPAREN', 8, 4), ('var2', 'ID', 8, 5), (',', 'COMMA', 8, 9), (8, 'NUMBER', 8, 11), ('*', 'MULT_OP', 8, 12), (8, 'NUMBER', 8, 13), (')', 'RPAREN', 8, 14), (';', 'SEMI', 8, 15), ('Put', 'PUT', 9, 1), ('(', 'LPAREN', 9, 4), ('var', 'ID', 9, 5), (',', 'COMMA', 9, 8), ('var2', 'ID', 9, 10), (')', 'RPAREN', 9, 14), (';', 'SEMI', 9, 15), ('Add', 'ADD', 10, 1), ('(', 'LPAREN', 10, 4), ('var', 'ID', 10, 5), (',', 'COMMA', 10, 8), ('Div', 'DIV', 10, 10), ('(', 'LPAREN', 10, 13), (5, 'NUMBER', 10, 14), (',', 'COMMA', 10, 15), ('var2', 'ID', 10, 16), (')', 'RPAREN', 10, 20), (')', 'RPAREN', 10, 21), (';', 'SEMI', 10, 22), ('ContinueUp', 'CONTINUEUP', 11, 1), (5, 'NUMBER', 11, 12), ('*', 'MULT_OP', 11, 13), ('(', 'LPAREN', 11, 14), (4, 'NUMBER', 11, 15), ('-', 'MINUS', 11, 16), (3, 'NUMBER', 11, 17), (')', 'RPAREN', 11, 18), (';', 'SEMI', 11, 19), ('ContinueDown', 'CONTINUEDOWN', 12, 1), ('var2', 'ID', 12, 14), (';', 'SEMI', 12, 18), ('ContinueRight', 'CONTINUERIGHT', 13, 1), ('Mult', 'MULT', 13, 15), ('(', 'LPAREN', 13, 19), ('var', 'ID', 13, 20), (',', 'COMMA', 13, 23), (2, 'NUMBER', 13, 24), (')', 'RPAREN', 13, 25), (';', 'SEMI', 13, 26), ('ContinueLeft', 'CONTINUELEFT', 14, 1), (2, 'NUMBER', 14, 14), (';', 'SEMI', 14, 15), ('Pos', 'POS', 15, 1), ('(', 'LPAREN', 15, 4), ('var', 'ID', 15, 5), (',', 'COMMA', 15, 8), ('Substr', 'SUBSTR', 15, 10), ('(', 'LPAREN', 15, 16), ('var', 'ID', 15, 17), (',', 'COMMA', 15, 20), (1, 'NUMBER', 15, 22), (')', 'RPAREN', 15, 23), (')', 'RPAREN', 15, 24), (';', 'SEMI', 15, 25), ('PosX', 'POSX', 16, 1), (5, 'NUMBER', 16, 6), ('*', 'MULT_OP', 16, 7), (5, 'NUMBER', 16, 8), (';', 'SEMI', 16, 9), ('PosY', 'POSY', 17, 1), ('var2', 'ID', 17, 6), ('*', 'MULT_OP', 17, 10), (5, 'NUMBER', 17, 11), (';', 'SEMI', 17, 12), ('UseColor', 'USECOLOR', 18, 1), (2, 'NUMBER', 18, 10), (';', 'SEMI', 18, 11), ('Down', 'DOWN', 19, 1), (';', 'SEMI', 19, 5), ('Up', 'UP', 20, 1), (';', 'SEMI', 20, 3), ('Beginning', 'BEGINNING', 21, 1), (';', 'SEMI', 21, 10), ('Equal', 'EQUAL', 22, 1), ('(', 'LPAREN', 22, 6), ('var1', 'ID', 22, 7), (',', 'COMMA', 22, 11), ('var2', 'ID', 22, 13), (')', 'RPAREN', 22, 17), (';', 'SEMI', 22, 18), ('Def', 'DEF', 23, 1), ('(', 'LPAREN', 23, 4), ('var3', 'ID', 23, 5), (',', 'COMMA', 23, 9), ('True', 'BOOLEAN', 23, 10), (')', 'RPAREN', 23, 14), (';', 'SEMI', 23, 15), ('Equal', 'EQUAL', 24, 1), ('(', 'LPAREN', 24, 6), ('true', 'BOOLEAN', 24, 7), (',', 'COMMA', 24, 11), ('var3', 'ID', 24, 12), (')', 'RPAREN', 24, 16), (';', 'SEMI', 24, 17), ('And', 'AND', 25, 1), ('(', 'LPAREN', 25, 4), ('var3', 'ID', 25, 5), (',', 'COMMA', 25, 9), ('true', 'BOOLEAN', 25, 10), (')', 'RPAREN', 25, 14), (';', 'SEMI', 25, 15), ('Or', 'OR', 26, 1), ('(', 'LPAREN', 26, 3), ('var3', 'ID', 26, 4), (',', 'COMMA', 26, 8), ('false', 'BOOLEAN', 26, 9), (')', 'RPAREN', 26, 14), (';', 'SEMI', 26, 15), ('Greater', 'GREATER', 27, 1), ('(', 'LPAREN', 27, 8), (3, 'NUMBER', 27, 9), (',', 'COMMA', 27, 10), (5, 'NUMBER', 27, 12), ('*', 'MULT_OP', 27, 13), (4, 'NUMBER', 27, 14), (')', 'RPAREN', 27, 15), (';', 'SEMI', 27, 16), ('Smaller', 'SMALLER', 28, 1), ('(', 'LPAREN', 28, 8), (3, 'NUMBER', 28, 9), (',', 'COMMA', 28, 10), (5, 'NUMBER', 28, 12), ('/', 'DIV_OP', 28, 13), (1, 'NUMBER', 28, 14), (')', 'RPAREN', 28, 15), (';', 'SEMI', 28, 16), ('Random', 'RANDOM', 29, 1), ('(', 'LPAREN', 29, 7), ('var2', 'ID', 29, 8), (')', 'RPAREN', 29, 12), (';', 'SEMI', 29, 13), ('Put', 'PUT', 31, 1), ('(', 'LPAREN', 31, 4), ('var', 'ID', 31, 5), (',', 'COMMA', 31, 8), ('Sum', 'SUM', 31, 10), ('(', 'LPAREN', 31, 13), ('var', 'ID', 31, 14), (',', 'COMMA', 31, 17), (4, 'NUMBER', 31, 18), (')', 'RPAREN', 31, 19), (')', 'RPAREN', 31, 20), (';', 'SEMI', 31, 21), ('Put', 'PUT', 31, 23), ('(', 'LPAREN', 31, 26), ('var', 'ID', 31, 27), (',', 'COMMA', 31, 30), ('Substr', 'SUBSTR', 31, 32), ('(', 'LPAREN', 31, 38), ('var', 'ID', 31, 39), (',', 'COMMA', 31, 42), ('var', 'ID', 31, 43), (')', 'RPAREN', 31, 46), (')', 'RPAREN', 31, 47), (';', 'SEMI', 31, 48), ('Repeat', 'REPEAT', 33, 1), ('[', 'LBRACKET', 34, 5), ('Add', 'ADD', 34, 6), ('(', 'LPAREN', 34, 9), ('var', 'ID', 34, 10), (')', 'RPAREN', 34, 13), (';', 'SEMI', 34, 14), ('Up', 'UP', 34, 16), (';', 'SEMI', 34, 18), (']', 'RBRACKET', 34, 19), ('Until', 'UNTIL', 35, 1), ('[', 'LBRACKET', 35, 7), ('var', 'ID', 35, 8), ('=', 'EQUALS', 35, 12), (2, 'NUMBER', 35, 14), (']', 'RBRACKET', 35, 15), (';', 'SEMI', 35, 16), ('While', 'WHILE', 37, 1), ('[', 'LBRACKET', 37, 7), ('Smaller', 'SMALLER', 37, 8), ('(', 'LPAREN', 37, 15), ('var', 'ID', 37, 16), (',', 'COMMA', 37, 19), (4, 'NUMBER', 37, 21), (')', 'RPAREN', 37, 22), (']', 'RBRACKET', 37, 23), ('[', 'LBRACKET', 38, 5), ('ContinueLeft', 'CONTINUELEFT', 38, 6), (1, 'NUMBER', 38, 19), ('*', 'MULT_OP', 38, 20), (2, 'NUMBER', 38, 21), (';', 'SEMI', 38, 22), ('Add', 'ADD', 38, 24), ('(', 'LPAREN', 38, 27), ('var', 'ID', 38, 28), (')', 'RPAREN', 38, 31), (';', 'SEMI', 38, 32), (']', 'RBRACKET', 38, 33), ('Whend', 'WHEND', 39, 1), (';', 'SEMI', 39, 6), ('For', 'FOR', 40, 1), ('i', 'ID', 40, 5), ('(', 'LPAREN', 40, 6), (2, 'NUMBER', 40, 7), ('to', 'TO', 40, 9), (4, 'NUMBER', 40, 12), (')', 'RPAREN', 40, 13), ('Loop', 'LOOP', 40, 15), ('[', 'LBRACKET', 41, 5), ('Add', 'ADD', 41, 6), ('(', 'LPAREN', 41, 9), ('var', 'ID', 41, 10), (',', 'COMMA', 41, 13), (3, 'NUMBER', 41, 14), ('+', 'PLUS', 41, 15), (8, 'NUMBER', 41, 16), (')', 'RPAREN', 41, 17), (']', 'RBRACKET', 41, 18), ('End', 'END', 42, 1), ('Loop', 'LOOP', 42, 5), (';', 'SEMI', 42, 9), ('Put', 'PUT', 44, 1), ('(', 'LPAREN', 44, 4), ('var', 'ID', 44, 5), (',', 'COMMA', 44, 8), (3, 'NUMBER', 44, 10), (')', 'RPAREN', 44, 11), (';', 'SEMI', 44, 12), ('Case', 'CASE', 46, 1), ('var', 'ID', 46, 6), ('When', 'WHEN', 47, 5), (1, 'NUMBER', 47, 10), ('Then', 'THEN', 47, 12), ('[', 'LBRACKET', 48, 9), ('Up', 'UP', 48, 10), (']', 'RBRACKET', 48, 12), ('When', 'WHEN', 49, 5), (2, 'NUMBER', 49, 10), ('Then', 'THEN', 49, 12), ('[', 'LBRACKET', 50, 9), ('Down', 'DOWN', 50, 10), (']', 'RBRACKET', 50, 14), ('When', 'WHEN', 51, 5), (3, 'NUMBER', 51, 10), ('Then', 'THEN', 51, 12), ('[', 'LBRACKET', 52, 9), ('Add', 'ADD', 52, 10), ('(', 'LPAREN', 52, 13), ('var', 'ID', 52, 14), (')', 'RPAREN', 52, 17), (']', 'RBRACKET', 52, 18), ('End', 'END', 53, 1), ('Case', 'CASE', 53, 5), (';', 'SEMI', 53, 9), ('For', 'FOR', 54, 1), ('x', 'ID', 54, 5), ('(', 'LPAREN', 54, 6), (0, 'NUMBER', 54, 7), ('to', 'TO', 54, 9), (3, 'NUMBER', 54, 12), (')', 'RPAREN', 54, 13), ('Loop', 'LOOP', 54, 15), ('[', 'LBRACKET', 55, 5), ('Case', 'CASE', 55, 6), ('x', 'ID', 55, 11), ('When', 'WHEN', 56, 9), (0, 'NUMBER', 56, 14), ('Then', 'THEN', 56, 16), ('[', 'LBRACKET', 57, 13), ('Up', 'UP', 57, 14), (']', 'RBRACKET', 57, 16), ('When', 'WHEN', 58, 9), (1, 'NUMBER', 58, 14), ('Then', 'THEN', 58, 16), ('[', 'LBRACKET', 59, 13), ('Down', 'DOWN', 59, 14), (']', 'RBRACKET', 59, 18), ('Else', 'ELSE', 60, 9), ('[', 'LBRACKET', 61, 13), ('Add', 'ADD', 61, 14), ('(', 'LPAREN', 61, 17), ('var', 'ID', 61, 18), (')', 'RPAREN', 61, 21), (']', 'RBRACKET', 61, 22), ('End', 'END', 62, 5), ('Case', 'CASE', 62, 9), (']', 'RBRACKET', 62, 13), ('End', 'END', 63, 1), ('Loop', 'LOOP', 63, 5), (';', 'SEMI', 63, 9)]

AST: <writingMachine.ast.program.Program object at 0x000001C62FDF3D60>
Definido var4 = True (Tipo: BOOLEAN)
Operando izquierdo: 5, Operando derecho: 6, Operador: >
False
Actualizado var4 = False
Definido var = 1 (Tipo: NUMBER)
Operando izquierdo: 8, Operando derecho: 8, Operador: *
64
Definido var2 = 64 (Tipo: NUMBER)
Actualizado var = 64
Division: 5 // 64 = 0
Incrementado var de 64 a 64
Operando izquierdo: 4, Operando derecho: 3, Operador: -
1
Operando izquierdo: 5, Operando derecho: 1, Operador: *
5
Movido 5 unidades hacia arriba. Nueva posicion en Y: 5
Movido 64 unidades hacia abajo. Nueva posicion en Y: -59
Multiplicacion: 64 * 2 = 128
Movido 128 unidades hacia la derecha. Nueva posicion en X: 128
Movido 2 unidades hacia la izquierda. Nueva posicion en X: 126
Sustraccion: 64 - 1 = 63
Posicion actualizada a X: 64, Y: 63
Operando izquierdo: 5, Operando derecho: 5, Operador: *
25
Posicion actualizada a X: 25, Y: 63
Operando izquierdo: 64, Operando derecho: 5, Operador: *
320
Posicion actualizada a X: 25, Y: 320
Color cambiado a Rojo (Compartimiento 2)
Lapicero colocado en la superficie (Down)
Lapicero levantado de la superficie (Up)
Lapicero colocado en la posicion inicial: X: 1, Y: 1
False
Definido var3 = True (Tipo: BOOLEAN)
True
True
True
Operando izquierdo: 5, Operando derecho: 4, Operador: *
20
False
Operando izquierdo: 5, Operando derecho: 1, Operador: /
5.0
True
21
Suma: 64 + 4 = 68
Actualizado var = 68
Sustraccion: 68 - 68 = 0
Actualizado var = 0
Iteracion Repeat 1
Incrementado var de 0 a 1
Lapicero levantado de la superficie (Up)
Operando izquierdo: 1, Operando derecho: 2, Operador: =
False
  Resultado de la condicion: False
Iteracion Repeat 2
Incrementado var de 1 a 2
Lapicero levantado de la superficie (Up)
Operando izquierdo: 2, Operando derecho: 2, Operador: =
True
  Resultado de la condicion: True
Saliendo del bucle Repeat
Iteracion While 1
True
  Resultado de la condicion: [True]
Operando izquierdo: 1, Operando derecho: 2, Operador: *
2
Movido 2 unidades hacia la izquierda. Nueva posicion en X: -1
Incrementado var de 2 a 3
Iteracion While 2
True
  Resultado de la condicion: [True]
Operando izquierdo: 1, Operando derecho: 2, Operador: *
2
Movido 2 unidades hacia la izquierda. Nueva posicion en X: -3
Incrementado var de 3 a 4
Iteracion While 3
False
  Resultado de la condicion: [False]
Saliendo del bucle While
Iteracion FOR: 2
Operando izquierdo: 3, Operando derecho: 8, Operador: +
11
Incrementado var de 4 a 15
Iteracion FOR: 3
Operando izquierdo: 3, Operando derecho: 8, Operador: +
11
Incrementado var de 15 a 26
Actualizado var = 3
Ejecutando Case para la variable: var
Valor de la variable: 3
Evaluando condicion: 1
Evaluando condicion: 2
Evaluando condicion: 3
Condicion cumplida, ejecutando cuerpo del When
Incrementado var de 3 a 4
Iteracion FOR: 0
Ejecutando Case para la variable: x
Valor de la variable: 0
Evaluando condicion: 0
Condicion cumplida, ejecutando cuerpo del When
Lapicero levantado de la superficie (Up)
Iteracion FOR: 1
Ejecutando Case para la variable: x
Valor de la variable: 1
Evaluando condicion: 0
Evaluando condicion: 1
Condicion cumplida, ejecutando cuerpo del When
Lapicero colocado en la superficie (Down)
Iteracion FOR: 2
Ejecutando Case para la variable: x
Valor de la variable: 2
Evaluando condicion: 0
Evaluando condicion: 1
Ninguna condicion cumplida, ejecutando clausula Else
Incrementado var de 4 a 5

AST:
Program
  statements: [
  DefStatement
    var_name: var4
    value:
    Expression
      value:
      BooleanExpression
        value: True
  PutStatement
    var_name: var4
    value:
    Expression
      value:
      BinaryOperation
        left:
        NumberExpression
          value: 5
        operator: >
        right:
        NumberExpression
          value: 6
  DefStatement
    var_name: var
    value:
    Expression
      value:
      NumberExpression
        value: 1
  DefStatement
    var_name: var2
    value:
    Expression
      value:
      BinaryOperation
        left:
        NumberExpression
          value: 8
        operator: *
        right:
        NumberExpression
          value: 8
  PutStatement
    var_name: var
    value:
    Expression
      value:
      IdExpression
        var_name: var2
  AddStatement
    var_name: var
    increment_value:
    Expression
      value:
      DivStatement
        left:
        Expression
          value:
          NumberExpression
            value: 5
        right:
        Expression
          value:
          IdExpression
            var_name: var2
  ContinueUpStatement
    move_units:
    Expression
      value:
      BinaryOperation
        left:
        NumberExpression
          value: 5
        operator: *
        right:
        ExpressionGroup
          expressions:
          ExpressionList
            expressions: [
            Expression
              value:
              BinaryOperation
                left:
                NumberExpression
                  value: 4
                operator: -
                right:
                NumberExpression
                  value: 3
            ]
  ContinueDownStatement
    move_units:
    Expression
      value:
      IdExpression
        var_name: var2
  ContinueRightStatement
    move_units:
    Expression
      value:
      MultStatement
        left:
        Expression
          value:
          IdExpression
            var_name: var
        right:
        Expression
          value:
          NumberExpression
            value: 2
  ContinueLeftStatement
    move_units:
    Expression
      value:
      NumberExpression
        value: 2
  PosStatement
    x_val:
    Expression
      value:
      IdExpression
        var_name: var
    y_val:
    Expression
      value:
      SubstrStatement
        left:
        Expression
          value:
          IdExpression
            var_name: var
        right:
        Expression
          value:
          NumberExpression
            value: 1
  PosXStatement
    x_val:
    Expression
      value:
      BinaryOperation
        left:
        NumberExpression
          value: 5
        operator: *
        right:
        NumberExpression
          value: 5
  PosYStatement
    y_val:
    Expression
      value:
      BinaryOperation
        left:
        IdExpression
          var_name: var2
        operator: *
        right:
        NumberExpression
          value: 5
  UseColorStatement
    color_value:
    Expression
      value:
      NumberExpression
        value: 2
  DownStatement
  UpStatement
  BeginningStatement
  Expression
    value:
    EqualStatement
      left:
      Expression
        value:
        IdExpression
          var_name: var1
      right:
      Expression
        value:
        IdExpression
          var_name: var2
  DefStatement
    var_name: var3
    value:
    Expression
      value:
      BooleanExpression
        value: True
  Expression
    value:
    EqualStatement
      left:
      Expression
        value:
        BooleanExpression
          value: True
      right:
      Expression
        value:
        IdExpression
          var_name: var3
  Expression
    value:
    AndStatement
      left:
      Expression
        value:
        IdExpression
          var_name: var3
      right:
      Expression
        value:
        BooleanExpression
          value: True
  Expression
    value:
    OrStatement
      left:
      Expression
        value:
        IdExpression
          var_name: var3
      right:
      Expression
        value:
        BooleanExpression
          value: False
  Expression
    value:
    GreaterStatement
      left:
      Expression
        value:
        NumberExpression
          value: 3
      right:
      Expression
        value:
        BinaryOperation
          left:
          NumberExpression
            value: 5
          operator: *
          right:
          NumberExpression
            value: 4
  Expression
    value:
    SmallerStatement
      left:
      Expression
        value:
        NumberExpression
          value: 3
      right:
      Expression
        value:
        BinaryOperation
          left:
          NumberExpression
            value: 5
          operator: /
          right:
          NumberExpression
            value: 1
  Expression
    value:
    RandomStatement
      value:
      Expression
        value:
        IdExpression
          var_name: var2
  PutStatement
    var_name: var
    value:
    Expression
      value:
      SumStatement
        left:
        Expression
          value:
          IdExpression
            var_name: var
        right:
        Expression
          value:
          NumberExpression
            value: 4
  PutStatement
    var_name: var
    value:
    Expression
      value:
      SubstrStatement
        left:
        Expression
          value:
          IdExpression
            var_name: var
        right:
        Expression
          value:
          IdExpression
            var_name: var
  Expression
    value:
    RepeatStatement
      body: [
      Program
        statements: [
        AddStatement
          var_name: var
          increment_value: None
        UpStatement
        ]
      ]
      condition:
      Program
        statements: [
        Expression
          value:
          BinaryOperation
            left:
            IdExpression
              var_name: var
            operator: =
            right:
            NumberExpression
              value: 2
        ]
  Expression
    value:
    WhileStatement
      condition:
      Program
        statements: [
        Expression
          value:
          SmallerStatement
            left:
            Expression
              value:
              IdExpression
                var_name: var
            right:
            Expression
              value:
              NumberExpression
                value: 4
        ]
      body: [
      Program
        statements: [
        ContinueLeftStatement
          move_units:
          Expression
            value:
            BinaryOperation
              left:
              NumberExpression
                value: 1
              operator: *
              right:
              NumberExpression
                value: 2
        AddStatement
          var_name: var
          increment_value: None
        ]
      ]
  Expression
    value:
    ForStatement
      variable: i
      min_value:
      NumberExpression
        value: 2
      max_value:
      NumberExpression
        value: 4
      body: [
      Program
        statements: [
        AddStatement
          var_name: var
          increment_value:
          Expression
            value:
            BinaryOperation
              left:
              NumberExpression
                value: 3
              operator: +
              right:
              NumberExpression
                value: 8
        ]
      ]
  PutStatement
    var_name: var
    value:
    Expression
      value:
      NumberExpression
        value: 3
  Expression
    value:
    CaseStatement
      variable: var
      when_clauses: [
      WhenClause
        condition:
        NumberExpression
          value: 1
        body: [
        Program
          statements: [
          UpStatement
          ]
        ]
      WhenClause
        condition:
        NumberExpression
          value: 2
        body: [
        Program
          statements: [
          DownStatement
          ]
        ]
      WhenClause
        condition:
        NumberExpression
          value: 3
        body: [
        Program
          statements: [
          AddStatement
            var_name: var
            increment_value: None
          ]
        ]
      ]
      else_clause: [
      ]
  Expression
    value:
    ForStatement
      variable: x
      min_value:
      NumberExpression
        value: 0
      max_value:
      NumberExpression
        value: 3
      body: [
      Program
        statements: [
        Expression
          value:
          CaseStatement
            variable: x
            when_clauses: [
            WhenClause
              condition:
              NumberExpression
                value: 0
              body: [
              Program
                statements: [
                UpStatement
                ]
              ]
            WhenClause
              condition:
              NumberExpression
                value: 1
              body: [
              Program
                statements: [
                DownStatement
                ]
              ]
            ]
            else_clause: [
            Program
              statements: [
              AddStatement
                var_name: var
                increment_value: None
              ]
            ]
        ]
      ]
  ]
Symbol Table:
Name       Type       Value
----------------------------------------
var4       BOOLEAN    False
var        NUMBER     5
var2       NUMBER     64
var3       BOOLEAN    True
